Filename: TravelBeApplication.java
Path: src/main/java/com/iky/travel/TravelBeApplication.java
Package: com.iky.travel
Summary: Notes:

- Purpose: Entry point for a Spring Boot travel application
- Functionality: Initializes and runs the Spring Boot application
- Important elements:
  - @SpringBootApplication annotation
  - SpringApplication.run() method
- Main class: TravelBeApplication
- Package: com.iky.travel

Filename: MongoConfig.java
Path: src/main/java/com/iky/travel/config/MongoConfig.java
Package: com.iky.travel.config
Summary: Notes:

- Purpose: Configure MongoDB connection for the application
- Functionality: Creates a MongoTemplate bean for interacting with MongoDB
- Key components:
  - @Configuration annotation for Spring configuration
  - MongoClient injected via constructor
  - @Bean method to create MongoTemplate
  - Uses MONGO_DB_NAME constant for database name
- Important classes:
  - MongoClient
  - MongoTemplate
  - Spring's @Configuration and @Bean annotations

Filename: RedisConfig.java
Path: src/main/java/com/iky/travel/config/RedisConfig.java
Package: com.iky.travel.config
Summary: Notes:

- Purpose: Configure Redis for use in a Spring application
- Functionality: Sets up a RedisTemplate bean for interacting with Redis
- Key classes/methods:
  - @Configuration: Marks class as a source of bean definitions
  - @Bean: Indicates redisTemplate method produces a bean
  - RedisTemplate: Core class for Redis operations
  - RedisConnectionFactory: Creates connections to Redis server
  - StringRedisSerializer: Serializes keys as strings
  - GenericJackson2JsonRedisSerializer: Serializes values as JSON
- Configures RedisTemplate with string keys and JSON values
- Enables easy integration of Redis caching in the application

Filename: WebSecurityConfiguration.java
Path: src/main/java/com/iky/travel/config/WebSecurityConfiguration.java
Package: com.iky.travel.config
Summary: Notes:

- Purpose: Configure web security for a Spring application
- Functionality:
  - Disables CSRF protection
  - Sets stateless session management
  - Permits all requests to "/api/**" and "/actuator/**"
  - Requires authentication for all other requests
  - Enables HTTP Basic authentication
- Key components:
  - @Configuration and @EnableWebSecurity annotations
  - SecurityFilterChain bean definition
  - HttpSecurity configuration
  - SessionCreationPolicy.STATELESS used
  - requestMatchers() and permitAll() methods for URL-based security rules

Filename: CityController.java
Path: src/main/java/com/iky/travel/controller/city/CityController.java
Package: com.iky.travel.controller.city
Summary: Notes:

- Purpose: REST API controller for managing city-related operations
- Functionality: CRUD operations for cities (Get, Delete, Add, Update)
- Important classes and methods:
  - CityController: Main controller class
  - CityService: Service layer for city operations
  - CityDTO: Data Transfer Object for city information
  - GetMapping: Retrieve city details
  - DeleteMapping: Remove a city
  - PostMapping: Add a new city
  - PutMapping: Update existing city information
- Uses Spring Boot annotations (@RestController, @RequestMapping)
- Handles exceptions for not found, add, and update operations
- Returns appropriate HTTP responses (200 OK, 201 Created, etc.)
- Validates input using @Valid annotation
- Constructs URI for newly created/updated resources

Filename: TravelController.java
Path: src/main/java/com/iky/travel/controller/travel/TravelController.java
Package: com.iky.travel.controller.travel
Summary: Notes for TravelController.java:

- Purpose: Handles travel-related HTTP requests
- Functionality:
  - Retrieves popular destinations
  - Clears popular destinations from Redis
  - Retrieves all destinations
- Important components:
  - @RestController annotation
  - @RequestMapping for API versioning
  - TravelService dependency injection
  - Three GET endpoints:
    1. popularDestinations
    2. clearPopularDestinations
    3. allDestinations
  - Uses ResponseEntity for HTTP responses
  - Throws RedisException on clearing failure

Filename: ApiPathConstants.java
Path: src/main/java/com/iky/travel/constant/common/ApiPathConstants.java
Package: com.iky.travel.constant.common
Summary: Notes:

- Purpose: Define API path constants for a travel application
- Functionality: Provides centralized storage of API endpoint prefixes
- Key points:
  - Contains constants for API version (v1) and resource prefixes (travel, city)
  - Combines prefixes to create full API paths
  - Private constructor prevents instantiation
- Important constants:
  - API_V1_PREFIX: Base path for version 1 API
  - API_V1_TRAVEL: Full path for travel-related endpoints
  - API_V1_CITY: Full path for city-related endpoints

Filename: MongoConstant.java
Path: src/main/java/com/iky/travel/constant/common/MongoConstant.java
Package: com.iky.travel.constant.common
Summary: Notes:

- Purpose: Define MongoDB-related constants for the travel application
- Functionality: Provides a single constant for the MongoDB database name
- Key points:
  - Contains one public static final String for the database name
  - Class is non-instantiable (private constructor)
  - Part of the com.iky.travel.constant.common package

Filename: RedisConstant.java
Path: src/main/java/com/iky/travel/constant/common/RedisConstant.java
Package: com.iky.travel.constant.common
Summary: Notes:

- Purpose: Define Redis key constants for caching
- Functionality: Provides static final strings for Redis keys
- Key points:
  - CITY_KEY: Used for caching city data
  - POPULAR_DESTINATIONS_KEY: Used for caching popular destinations
  - Private constructor prevents instantiation
- Used in Redis caching operations throughout the application

Filename: CityDTO.java
Path: src/main/java/com/iky/travel/domain/dto/CityDTO.java
Package: com.iky.travel.domain.dto
Summary: Notes:

- Purpose: Data Transfer Object (DTO) for City information
- Functionality: Encapsulates city data for transfer between layers
- Important aspects:
  - Implements Serializable
  - Uses Lombok @Getter and @Setter
  - Includes validation annotations (@NotNull, @NotBlank, @Positive, @Size)
  - Fields: id, plateNo, name, population, country, topActivities
  - Custom validation messages for each constraint
  - Serialization version UID included

Filename: CityRepository.java
Path: src/main/java/com/iky/travel/domain/repository/city/CityRepository.java
Package: com.iky.travel.domain.repository.city
Summary: Notes:

- Purpose: Repository interface for managing City entities in MongoDB
- Functionality: Provides CRUD operations for City objects
- Extends MongoRepository for built-in MongoDB operations
- Custom methods:
  - findByName: Retrieves a City by its name
  - deleteByName: Deletes a City by its name
- Uses Spring Data MongoDB annotations (@Repository)
- Utilizes Optional for null-safe City retrieval

Filename: CityMapper.java
Path: src/main/java/com/iky/travel/domain/mapper/CityMapper.java
Package: com.iky.travel.domain.mapper
Summary: Notes:

- Purpose: Defines a mapper interface for converting between City and CityDTO objects.
- Functionality: Provides methods for bidirectional mapping between domain model (City) and DTO (CityDTO).
- Important elements:
  - Uses MapStruct (@Mapper annotation) for automatic implementation of mapping methods.
  - INSTANCE: Singleton instance of the mapper for easy access.
  - dtoToCity: Converts CityDTO to City.
  - cityToDto: Converts City to CityDTO.
- Part of the com.iky.travel.domain.mapper package, likely used in a travel-related application.

Filename: City.java
Path: src/main/java/com/iky/travel/domain/model/City.java
Package: com.iky.travel.domain.model
Summary: Notes:

- Purpose: Defines a City entity for MongoDB storage
- Functionality: Represents city data with fields like name, population, country, etc.
- Key points:
  - Uses Spring Data MongoDB annotations (@Document, @Id, @Field)
  - Lombok @Data for automatic getter/setter generation
  - Fields include: id, name, plateNo, population, country, topActivities
  - Custom field mapping for plate_no and top_activities
- Important classes/annotations:
  - @Document: Marks class as MongoDB document
  - @Id: Designates primary key
  - @Field: Custom field mapping
  - @Data: Lombok annotation for boilerplate code generation

Filename: CityService.java
Path: src/main/java/com/iky/travel/domain/service/city/CityService.java
Package: com.iky.travel.domain.service.city
Summary: Notes:

- Purpose: Defines the contract for managing city-related operations in a travel application.
- Functionality: CRUD operations for cities (Add, Update, Read, Delete) and checking city existence.
- Key points:
  - Interface named CityService
  - Uses CityDTO for data transfer
  - Methods for adding, updating, retrieving, and deleting cities
  - Method to check if a city exists
  - Returns Optional<CityDTO> for potential null handling
  - Uses boolean return types for operation success indicators

Filename: CityServiceImpl.java
Path: src/main/java/com/iky/travel/domain/service/city/impl/CityServiceImpl.java
Package: com.iky.travel.domain.service.city.impl
Summary: Notes:

1. Purpose: Implements CityService interface for managing city data.

2. Functionality:
   - CRUD operations for cities (add, update, get, delete)
   - Caching city data in Redis
   - Tracking popular destinations

3. Key components:
   - Uses Redis for caching (RedisTemplate, HashOperations)
   - Integrates with CityRepository for database operations
   - Implements error handling with custom exceptions
   - Uses CityMapper for DTO-Entity conversions

4. Important methods:
   - addCity: Adds new city, checks for existing cities
   - updateCity: Updates existing city
   - getCity: Retrieves city from cache or database
   - deleteCity: Removes city from cache and database
   - incrementCityQueryCount: Tracks popular destinations

5. Caching strategy:
   - Stores city data in Redis hash
   - Uses city name as key
   - Implements cache-aside pattern

6. Additional features:
   - Tracks popular destinations using Redis sorted set
   - Generates Redis keys with prefix for city data

Filename: TravelService.java
Path: src/main/java/com/iky/travel/domain/service/travel/TravelService.java
Package: com.iky.travel.domain.service.travel
Summary: Notes:

- Purpose: Defines a service interface for travel-related operations
- Functionality:
  - Retrieve most queried cities
  - Get all available cities
  - Clear popular destinations data
- Key methods:
  - getMostQueriedCities(int): Returns top N most queried cities
  - getAllCities(): Retrieves all cities in the system
  - clearPopularDestinations(): Resets popular destinations data
- Uses Set<Object> for city collections, suggesting generic implementation
- Part of com.iky.travel.domain.service.travel package

Filename: TravelServiceImpl.java
Path: src/main/java/com/iky/travel/domain/service/travel/impl/TravelServiceImpl.java
Package: com.iky.travel.domain.service.travel.impl
Summary: Notes:

- Purpose: Implements travel-related operations using Redis for data storage and retrieval.
- Functionality:
  - Retrieves most queried cities
  - Fetches all cities from Redis
  - Clears popular destinations data
- Key classes/methods:
  - TravelServiceImpl: Main service implementation
  - RedisTemplate: Used for Redis operations
  - getMostQueriedCities(): Returns top N popular destinations
  - getAllCities(): Retrieves all cities from Redis
  - clearPopularDestinations(): Deletes popular destinations data
- Uses Redis sorted sets and hash structures
- Implements TravelService interface
- Spring @Service annotation for dependency injection

Filename: ApiErrorResponse.java
Path: src/main/java/com/iky/travel/exception/ApiErrorResponse.java
Package: com.iky.travel.exception
Summary: Notes:

- Purpose: Defines a structure for API error responses
- Functionality: Encapsulates error details for consistent API error handling
- Key components:
  - timestamp: Time of error occurrence
  - status: HTTP status code
  - error: Error type or description
  - message: Detailed error message
  - requestPath: Path of the request that caused the error
- Uses Lombok annotations for automatic getter, setter, toString, and constructor generation
- Part of the exception handling mechanism in the travel application

Filename: BaseErrorResponse.java
Path: src/main/java/com/iky/travel/exception/BaseErrorResponse.java
Package: com.iky.travel.exception
Summary: Notes:

- Purpose: Defines a standardized error response structure for the application.
- Functionality: Encapsulates error details including timestamp, message, HTTP status, and request path.
- Key components:
  - Uses Java 16+ record feature for concise immutable data class
  - Includes LocalDateTime for precise error occurrence timing
  - Utilizes Spring's HttpStatusCode for standardized HTTP status representation
- Likely used across the application for consistent error handling and API responses

Filename: ValidationErrorResponse.java
Path: src/main/java/com/iky/travel/exception/ValidationErrorResponse.java
Package: com.iky.travel.exception
Summary: Notes:

- Purpose: Represents a response structure for validation errors in the application.
- Functionality: Encapsulates details of validation errors, including timestamp, HTTP status code, error message, and field-specific errors.
- Important elements:
  - Uses Lombok annotations (@Getter, @Setter, @AllArgsConstructor) for boilerplate code reduction.
  - LocalDateTime: Captures the time of the error occurrence.
  - HashMap<String, String>: Stores field-specific error messages.
  - Part of the com.iky.travel.exception package, likely used in exception handling for the travel application.

Filename: GlobalExceptionHandler.java
Path: src/main/java/com/iky/travel/exception/GlobalExceptionHandler.java
Package: com.iky.travel.exception
Summary: Notes:

- Purpose: Global exception handling for a Spring Boot application
- Functionality: Handles validation errors and general exceptions
- Key classes/methods:
  - @RestControllerAdvice: Centralized exception handling
  - @ExceptionHandler: Defines exception handling methods
  - handleValidationExceptions: Processes MethodArgumentNotValidException
  - handleAllOtherExceptions: Catches all other exceptions
  - ResponseEntity: Used for HTTP responses
  - ValidationErrorResponse/BaseErrorResponse: Custom error response classes
- Logs unhandled exceptions
- Returns appropriate HTTP status codes and error messages

Filename: ApiExceptionHandler.java
Path: src/main/java/com/iky/travel/exception/ApiExceptionHandler.java
Package: com.iky.travel.exception
Summary: Notes:

1. Purpose: Centralized exception handling for a travel-related API.

2. Functionality: Handles various exceptions related to city operations and Redis, returning appropriate HTTP responses.

3. Important classes and methods:
   - @RestControllerAdvice: Global exception handling
   - @ExceptionHandler: Specific exception handling methods
   - ResponseEntity: Used to return custom API responses
   - ApiErrorResponse: Custom error response object

4. Handled exceptions:
   - CityNotFoundException
   - CityAlreadyExistsException
   - CityAddException
   - CityUpdateException
   - CityDeleteException
   - RedisException

5. Each handler method:
   - Creates an ApiErrorResponse with details
   - Returns a ResponseEntity with appropriate HTTP status

6. Common pattern: All handlers follow a similar structure for consistency

7. Uses Spring Framework's WebRequest for additional request information

8. Timestamps errors using LocalDateTime.now()

Filename: CityDeleteException.java
Path: src/main/java/com/iky/travel/exception/city/CityDeleteException.java
Package: com.iky.travel.exception.city
Summary: Notes:

- Custom exception class for city deletion errors
- Extends RuntimeException
- Located in com.iky.travel.exception.city package
- Provides a constructor with message and throwable parameters
- Used to handle specific exceptions related to city deletion operations in the travel application

Filename: CityAddException.java
Path: src/main/java/com/iky/travel/exception/city/CityAddException.java
Package: com.iky.travel.exception.city
Summary: Notes:

- Custom exception class for city addition errors
- Extends RuntimeException
- Located in com.iky.travel.exception.city package
- Single constructor accepting a String message
- Used to handle specific exceptions related to adding cities in the travel application

Filename: CityUpdateException.java
Path: src/main/java/com/iky/travel/exception/city/CityUpdateException.java
Package: com.iky.travel.exception.city
Summary: Notes:

- Custom exception class for city update operations
- Extends RuntimeException
- Located in com.iky.travel.exception.city package
- Single constructor accepting a String message
- Used to handle specific errors related to updating city information
- Allows for more precise error handling in the city management module

Filename: CityAlreadyExistsException.java
Path: src/main/java/com/iky/travel/exception/city/CityAlreadyExistsException.java
Package: com.iky.travel.exception.city
Summary: Notes:

- Custom exception class for handling cases when a city already exists
- Extends RuntimeException
- Located in com.iky.travel.exception.city package
- Single constructor that takes a String message
- Used to throw specific exceptions related to city existence in the travel application
- Allows for more precise error handling and messaging in the city management functionality

Filename: CityNotFoundException.java
Path: src/main/java/com/iky/travel/exception/city/CityNotFoundException.java
Package: com.iky.travel.exception.city
Summary: Notes:

- Custom exception class for handling cases when a city is not found
- Extends RuntimeException for unchecked exception behavior
- Located in the com.iky.travel.exception.city package
- Single constructor that accepts an error message
- Used to provide more specific error handling in a travel-related application

Filename: RedisException.java
Path: src/main/java/com/iky/travel/exception/common/RedisException.java
Package: com.iky.travel.exception.common
Summary: Notes:

- Purpose: Custom exception for Redis-related errors
- Functionality: Extends RuntimeException to create a specific exception for Redis operations
- Important classes:
  - RedisException: Custom exception class
  - RuntimeException: Superclass extended by RedisException
- Key method: Constructor accepting a String message
- Used to handle and propagate Redis-specific errors in the application

